# Decimal Digit Transformation
# Write a function in an Object Orientated Programming language of your choice that, when passed a decimal digit X, calculates and returns the value of X + XX + XXX + XXXX. For example, if X is 3, the function should return 3702 (3 + 33 + 333 + 3333). Ensure the function handles valid inputs and provides meaningful error messages for invalid inputs.

# I have used python with OOPs here

class DigitCalculator:
    def __init__(self, digit):
        """Initialize the class with the digit after validation."""
        if not isinstance(digit, int):  # Check if it's an integer
            raise ValueError("Input must be an integer.")
        if digit < 0 or digit > 9:  # Check if it's a single decimal digit
            raise ValueError("Input must be a single decimal digit (0-9).")
        self.digit = digit

    def calculate_sum(self):
        """Calculates X + XX + XXX + XXXX."""
        x_str = str(self.digit)  # Convert digit to string for repetition
        terms = [int(x_str * i) for i in range(1, 5)]  # ["3", "33", "333", "3333"]
        return sum(terms)  # Sum the values

# Example Usage
if __name__ == "__main__":
    try:
        digit = int(input("Enter a single decimal digit (0-9): "))  # User input
        calculator = DigitCalculator(digit)  # Create object
        result = calculator.calculate_sum()  # Compute sum
        print(f"Result: {result}")
    except ValueError as e:
        print(f"Error: {e}")  # Handle invalid inputs


